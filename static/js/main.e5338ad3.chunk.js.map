{"version":3,"sources":["Componets/Header/Header.js","Componets/Profile/Card.js","Componets/Profile/CardContainer.js","Componets/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","id","lang","Card","props","className","profile_pic","picSrc","src","alt","first_name","last_name","renderImage","role","icons","phone_number","href","aria-label","icon","faPhoneSquare","push","email","faEnvelope","github","target","faGithubSquare","twitter","faTwitterSquare","linkedin","faLinkedin","Fragment","renderIcons","CardContainer","listOfpersons","style","width","Box","display","flexDirection","flexWrap","p","m","bgcolor","map","person","index","key","Footer","faTwitter","faGithub","faLinkedinIn","lists","usersData","copyOfPeople","App","useState","people","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5338ad3.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nfunction Header() {\n \n  return (\n    <header class=\"w3-container header w3-padding\" id=\"myHeader\">\n         <div class=\"w3-center w3-display-container\" > \n            <h1 class=\"w3-xxxlarge w3-animate-zoom \">\n               <b>\n               <span class=\"en lang_term\" lang=\"en\">MEET THE CSPS DIGITAL ACADEMY</span> \n            </b>\n         </h1>\n            <div class=\" w3-padding-4\">\n               <h4 class=' w3-xxlarge w3-animate-zoom'>\n                  <span class=\"en lang_term\" lang=\"en\">Teaching public servants the digital skills, approaches and mindsets needed in todayâ€™s digital age.</span>\n               </h4>\n            </div>\n         </div>\n      </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPhoneSquare,faEnvelope } from '@fortawesome/fontawesome-free-solid'\nimport './Card.css'\nimport {\n  faTwitterSquare,\n  faGithubSquare,\n  faLinkedin\n} from '@fortawesome/free-brands-svg-icons';\n\n/*\nThis component produces a Profile card for each person in DA \nFor each person contact method , We first check if it's empty and then create an a ref with it's associated icon\n\nFor rendering the person image we assume  it's in picture directory \n*/\n\n\n\nconst Card = ({props}) =>{\n \n\n  let renderIcons =(props)=>{\n    let icons=[];\n\tif(props.phone_number){\n\t\tlet phone_number= <a href={props.phone_number}id=\"phone_number \" aria-label=\"user email\" className=\"card_icon\" ><FontAwesomeIcon icon={faPhoneSquare}></FontAwesomeIcon></a> ;\n\t\t icons.push(phone_number);\n\t}\n\tif(props.email){\n\t\tlet email= <a href={props.email} id=\"email\" aria-label=\"user email\" className=\"card_icon\"><FontAwesomeIcon icon={faEnvelope}></FontAwesomeIcon></a>;\n      icons.push(email);\n\t}\n    \n\n    if(props.github){\n      let github= <a href={props.github} target=\"_blank\" className=\"card_icon\"><FontAwesomeIcon icon={faGithubSquare}></FontAwesomeIcon></a> \n        icons.push(github);\n    }\n\n    if(props.twitter){\n      let twitter=<a href={props.twitter} target=\"_blank\" className=\"card_icon\"><FontAwesomeIcon icon={faTwitterSquare}></FontAwesomeIcon></a> \n       icons.push(twitter);\n    }\n\n    if(props.linkedin){\n      let linkedin=<a href={props.linkedin} target=\"_blank\" className=\"card_icon\"><FontAwesomeIcon icon={faLinkedin}></FontAwesomeIcon></a> \n        icons.push(linkedin);\n    }\n   return <React.Fragment>\n      {icons}</React.Fragment>\n  }\n\n  let renderImage=(props)=>{\n\t let rootPicDirectory=\"pictures/\"\n    if(props.profile_pic){\n      let picSrc=props.profile_pic;\n\n      return <img src={rootPicDirectory+picSrc} alt={\"Image of \"+ props.first_name + \" \"+ props.last_name } id='profile_pic'/>\n    }\n    else{\n      return <img src='./pictures/digitalAcademy.jpg ' id='profile_pic' alt=\"Profile picture\" />\n\n    }\n\n  }\n\n  \n    return( \n    <div className=\"Card\">\n      {renderImage(props)}\n      <h1>{props.first_name }</h1>\n\t  <h1>{props.last_name}</h1>\n      <p id=\"title\">{props.role}</p>\n      {renderIcons(props)}\n      <br></br>\n      <a className='contact w3-hover-shadow' aria-label='Learn more about Digital Academy' href=\"https://www.csps-efpc.gc.ca/About_us/Business_lines/digitalacademy-eng.aspx\" target=\"_blank\">Digital Academy</a>\n      </div>\n      \n    )\n        \n}\n\nexport default Card;","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Card from './Card.js'\n\nconst CardContainer = ({listOfpersons})=>{\n\nreturn (\n\n<div className=\"cardsContainer\" style={{ width: '100%' }}>\n      <Box display=\"flex\" flexDirection=\"row\"  flexWrap=\"wrap\" p={1} m={1} bgcolor=\"background.paper\">\n        {listOfpersons.map((person,index)=><Card key={index} props={person}></Card>)}\n      </Box>\n    </div>)\n\n}\n\nexport default CardContainer;","import React from 'react';\nimport './Footer.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from '@fortawesome/fontawesome-free-solid'\n\nimport {\n  faTwitter,\n  faGithub,\n  faLinkedinIn,\n\n} from '@fortawesome/free-brands-svg-icons';\n\n\n\nfunction Footer() {\n \n  return (\n     <footer className=\"w3-container w3-padding-32  w3-theme w3-center footer\">\n            <h4>Connect with us </h4>\n\n            <div className=\"socialMediaIcons\">\n              <a href=\"mailto:csps.digitalacademy-academiedunumerique.efpc@canada.ca\" ><FontAwesomeIcon className=\"icon\" icon={faEnvelope}/></a>\n              <a href=\"https://twitter.com/digiacademycan\" ><FontAwesomeIcon className=\"icon\" icon={faTwitter}/></a>\n              <a href=\"https://github.com/DIS-SIN\" ><FontAwesomeIcon className=\"icon\" icon={faGithub}/></a>\n              <a href=\"https://ca.linkedin.com/company/csps-digiacademy-acadenum-efpc\" ><FontAwesomeIcon className=\"icon\" icon={faLinkedinIn}/></a>\n            </div>  \n     </footer>\n\n  );\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Componets/Header/Header'\nimport usersData from './data/data.json'\nimport CardContainer from './Componets/Profile/CardContainer';\nimport Search from './Componets/Search/Search'\nimport Footer from './Componets/Footer/Footer'\n\n\nconst newLocal = usersData;\n var lists=newLocal\nvar copyOfPeople= [...lists];\n\nfunction App() {\n  const [people,setPeople]=useState(copyOfPeople)\n  const findPerson = (query)=>{\n   let newList=copyOfPeople.filter((person)=> {\n     return (person.first_name.toLowerCase().startsWith(query.toLowerCase())) || (person.last_name.toLowerCase().startsWith(query.toLowerCase()))\n    })\n    console.log(\"the newList looks like this:\"+newList);\n    if(query===\"\"){\n      console.log(\"The query was empty\")\n      setPeople(lists)\n    }\n    else{\n      console.log(\"the Query wasn't empty\")\n    setPeople(newList)\n    }\n  \n  \n  }\n \n  return (\n    <div className=\"App\">\n      <Header/>\n     <CardContainer listOfpersons={people}/>\n     <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}